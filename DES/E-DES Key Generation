/*
Key Generation in DES is not a straightforward process. Can you implement it?

PC1 { 57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2, 59, 51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36, 63, 55, 47, 39, 31, 23, 15, 7, 62, 54, 46, 38, 30, 22, 14, 6, 61, 53, 45, 37, 29, 21, 13, 5, 28, 20, 12, 4 }

PC2 { 14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10, 23, 19, 12, 4, 26, 8, 16, 7, 27, 20, 13, 2, 41, 52, 31, 37, 47, 55, 30, 40, 51, 45, 33, 48, 44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32 }

Rotations { 1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1 }

Input
The input consists of a single line that has 16 Hex characters which represent the key going into DES.

Output
The output should consist of 16 lines each of which contains 12 Hex characters(Must use numbers and capital letters) that represent the 48-bit keys going getting into each round respectively.

Example
input
00000000FFFFFFFF
output
7B14E93A4B26
5998F9164926
95E8FA8429D4
B66F86E1A2D1
7A3F0573860B
49B47D1E150E
C5C4FE0C71E4
F6CBA260E8E1
F69B2362E859
ABBA47A3951A
2976DE8D1722
7455F85C4A64
D6C97150C8DC
8FEB1781B499
2F378FAB3621
6B178D3B5223
*/

#include <iostream>
#include <string>
#include <sstream>
#include <bitset>
#include <iomanip>
using namespace std;
/*Constructing all Permutation tables*/
const int firstPermutationChoice[56] = { 57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2, 59, 51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36, 63, 55, 47, 39, 31, 23, 15, 7, 62, 54, 46, 38, 30, 22, 14, 6, 61, 53, 45, 37, 29, 21, 13, 5, 28, 20, 12, 4 };
const int secondPermutationChoice[48] = { 14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10, 23, 19, 12, 4, 26, 8, 16, 7, 27, 20, 13, 2, 41, 52, 31, 37, 47, 55, 30, 40, 51, 45, 33, 48, 44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32 };
const int rotations[16] = { 1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1 };
/*Functions*/
string hexToBin(string hexadecimal) {
	string binary = "";
	for (int i = 0; i < hexadecimal.length(); i++) {
		char s = hexadecimal[i];
		stringstream ss;
		ss << hex << s;
		unsigned n;
		ss >> n;
		bitset<4> b(n);
		binary += b.to_string();
	}
	return binary;
}
string permutation(string input, char c) {
	string output = "";
	if (c == '1') { /*Permutation Choice 1*/
		for (int i = 0; i < 56; i++) {
			output += input[firstPermutationChoice[i] - 1];
		}
		return output;
	}
	else if (c == '2') { /*Permutation Choice 2*/
		for (int i = 0; i < 48; i++) {
			output += input[secondPermutationChoice[i] - 1];
		}
		return output;
	}
}
string shiftLeft(string toBeRotated, int shiftBy)
{
	if (shiftBy > toBeRotated.length()) {
		shiftBy = shiftBy - toBeRotated.length();
	}
 
	if (toBeRotated.length() == 1) {
		//do nothing
	}
	else {
		char temp;
		//for loop to print the array with indexes moved up (to the left) <-- by 2
		for (int i = 0; i < toBeRotated.length() - shiftBy; i++)
		{//EXAMPLE shift by 3  for a c-string of 5
			temp = toBeRotated[i];//temp = myarray[0]
			toBeRotated[i] = toBeRotated[i + shiftBy];//myarray[0] == myarray[2]
			toBeRotated[i + shiftBy] = temp;//myarray[2] = temp(value previously at index i)
		}
 
	}
	return toBeRotated;
}
int main() {
	/*Reading inputs*/
	string key;
	cin >> key;
	/*Formatting key*/
	if (key.length() < 16) {
		for (int i = key.length(); i != 16; i++) {
			key.insert(0, "0");
		}
	}
	/*Hexadecimal input conversion to Binary*/
	string binaryKey = hexToBin(key);
	/*Permutation Choice 1*/
	string permuatedKey = permutation(binaryKey, '1');
	/*Splitting the permuated key*/
	string rightD = permuatedKey.substr(permuatedKey.length() / 2, permuatedKey.length() / 2);
	string leftC = permuatedKey.substr(0, permuatedKey.length() / 2);
	string initialKeys[16][2];
	for (int i = 0; i < 16; i++) {
		initialKeys[i][0] = leftC;
		initialKeys[i][1] = rightD;
	}
	/*Key rotation*/
	for (int i = 0; i < 16; i++) {
		if (i == 0) {
			initialKeys[i][0] = shiftLeft(initialKeys[i][0], rotations[i]);
			initialKeys[i][1] = shiftLeft(initialKeys[i][1], rotations[i]);
		}
		else {
			initialKeys[i][0] = shiftLeft(initialKeys[i - 1][0], rotations[i]);
			initialKeys[i][1] = shiftLeft(initialKeys[i - 1][1], rotations[i]);
		}
	}
	string binaryKeys[16];
	for (int i = 0; i < 16; i++) {
		binaryKeys[i] = initialKeys[i][0] + initialKeys[i][1];
	}
	/*Permutation Choice 2*/
	for (int i = 0; i < 16; i++) {
		binaryKeys[i] = permutation(binaryKeys[i], '2');
	}
	/*Formatting output*/
	string keys[16];
	unsigned long long decimalOutput[16];
	for (int i = 0; i < 16; i++) {
		decimalOutput[i] = stoull(binaryKeys[i], 0, 2);
		stringstream temp;
		temp << uppercase << setfill('0') << setw(2) << hex << decimalOutput[i];
		keys[i] = temp.str();
		if (keys[i].length() < 12) {
			for (int j = keys[i].length(); j != 12; j++) {
				keys[i].insert(0, "0");
			}
		}
	}
	for (int i = 0; i < 16; i++) {
		cout << keys[i] << endl;
	}
}
