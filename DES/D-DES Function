/*
DES Encryption has many stages. One of the stages is a function F that takes as its input a block of 32-bits(half of the input block to the DES) and a key that is 48-bits then produces a 32-bit output. The functionality of F can be seen in the following figure: https://codeforces.com/predownloaded/5a/89/5a8926175d76cd7082e4978f89ce3c90f741cd3c.png
The expansion P-box table is given: https://codeforces.com/predownloaded/2c/1e/2c1e739f000d99d89316d9bb788ba6b7cbf05af6.png
The Straight P-box table is given: https://codeforces.com/predownloaded/e8/87/e88740dab06b60c4b92566a8beedbd41efec8417.png
The 32-bit input first pass through an expansion box(Which is just similar to the permutation box you implemented(hopefully) in the first problem.) The output of the expansion box is XORed with the 48-bit key and the result is passed through the 8 S-boxes you implemented in the previous problem to produce 32-bit output that passes through a straight permutation box.

Can you use the codes in your previous submissions to form the full F-Function? Yes, you can.

Input
The input consists of 2 lines. The first line consists of 8 Hex characters that represent the 32-bit input block. The second line consists of 12 Hex characters that represent the 48-bit key block that is also an input to the function.

Output
The output should consist of a single line that has 8 Hex characters which represent the output of the F function given the inputs above.
*/

#include <iostream>
#include <string>
#include <sstream>
#include <bitset>
#include <iomanip>
using namespace std;
 
/*Constructing all Permutation tables*/
const int expansionPermutation[48] = { 32, 1, 2, 3, 4, 5, 4, 5, 6, 7, 8, 9, 8, 9, 10, 11, 12, 13, 12, 13, 14, 15, 16, 17, 16, 17, 18, 19, 20, 21,20, 21, 22, 23, 24, 25, 24, 25, 26, 27, 28, 29, 28, 29, 30, 31, 32, 1 };
const int straightPermutation[32] = { 16, 7, 20, 21, 29, 12, 28, 17, 1, 15, 23, 26, 5, 18, 31, 10, 2, 8, 24, 14, 32, 27, 3, 9, 19, 13, 30, 6, 22, 11, 4, 25 };
/*Constructing all S-Boxs*/
const int S1[4][16] = {
	{ 14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7 },
	{ 0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8 },
	{ 4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0 },
	{ 15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13 }
};
const int S2[4][16] = {
	{ 15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10 },
	{ 3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5 },
	{ 0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15 },
	{ 13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9 }
};
const int S3[4][16] = {
	{ 10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8 },
	{ 13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1 },
	{ 13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7 },
	{ 1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12 }
};
const int S4[4][16] = {
	{ 7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15 },
	{ 13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9 },
	{ 10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4 },
	{ 3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14 }
};
const int S5[4][16] = {
	{ 2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9 },
	{ 14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6 },
	{ 4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14 },
	{ 11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3 }
};
const int S6[4][16] = {
	{ 12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11 },
	{ 10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8 },
	{ 9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6 },
	{ 4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13 }
};
const int S7[4][16] = {
	{ 4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1 },
	{ 13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6 },
	{ 1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2 },
	{ 6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12 }
};
const int S8[4][16] = {
	{ 13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7 },
	{ 1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2 },
	{ 7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8 },
	{ 2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11 }
};
/*Functions*/
string hexToBin(string hexadecimal) {
	string binary = "";
	for (int i = 0; i < hexadecimal.length(); i++) {
		char s = hexadecimal[i];
		stringstream ss;
		ss << hex << s;
		unsigned n;
		ss >> n;
		bitset<4> b(n);
		binary += b.to_string();
	}
	return binary;
}
string permutation(string input, char c) {
	string output = "";
	if (c == 's') { /*Straight Permutation*/
		for (int i = 0; i < 32; i++) {
			output += input[straightPermutation[i] - 1];
		}
		return output;
	}
	else if (c == 'e') { /*Expansion Permutation*/
		for (int i = 0; i < 48; i++) {
			output += input[expansionPermutation[i] - 1];
		}
		return output;
	}
}
string XOR(string x, string y) {
	string result = "";
	for (int i = 0; i < x.size(); i++) {
		result += (((x[i] - '0') ^ (y[i] - '0')) + '0');
	}
	return result;
}
string SBox(string binaryInput) {
	/*S-Boxs entries*/
	string entries[8];
	for (int i = 0; i < 8; i++) {
		entries[i] = binaryInput.substr(0, 6);
		binaryInput.erase(0, 6);
	}
	string rows[8];
	string columns[8];
	for (int i = 0; i < 8; i++) {
		rows[i] = entries[i][0];
		rows[i] += entries[i][5];
		columns[i] = entries[i][1];
		columns[i] += entries[i][2];
		columns[i] += entries[i][3];
		columns[i] += entries[i][4];
	}
	/*Binary entries to Decimal*/
	unsigned long long decimalEntry[8][2];
	for (int i = 0; i < 8; i++) {
		decimalEntry[i][0] = stoull(rows[i], 0, 2);
		decimalEntry[i][1] = stoull(columns[i], 0, 2);
	}
	/*Getting results from S-Boxs*/
	int BoxsOutput[8];
	BoxsOutput[0] = S1[decimalEntry[0][0]][decimalEntry[0][1]];
	BoxsOutput[1] = S2[decimalEntry[1][0]][decimalEntry[1][1]];
	BoxsOutput[2] = S3[decimalEntry[2][0]][decimalEntry[2][1]];
	BoxsOutput[3] = S4[decimalEntry[3][0]][decimalEntry[3][1]];
	BoxsOutput[4] = S5[decimalEntry[4][0]][decimalEntry[4][1]];
	BoxsOutput[5] = S6[decimalEntry[5][0]][decimalEntry[5][1]];
	BoxsOutput[6] = S7[decimalEntry[6][0]][decimalEntry[6][1]];
	BoxsOutput[7] = S8[decimalEntry[7][0]][decimalEntry[7][1]];
	/*Converting Decimal outputs to Hexadecimal*/
	stringstream temp;
	for (int i = 0; i < 8; i++) {
		temp << uppercase << setfill('0') << setw(1) << hex << BoxsOutput[i];
	}
	string result = temp.str();
	return hexToBin(result);
}
int main() {
	/*Reading inputs*/
	string inputData;
	cin >> inputData;
	string key;
	cin >> key;
	/*Hexadecimal input conversion to Binary*/
	string binaryInput = hexToBin(inputData);
	string binaryKey = hexToBin(key);
	/*Expansion Permutation*/
	string expandedInput = permutation(binaryInput, 'e');
	/*XOR key and Expansion Permutation output*/
	string outputFromXOR = XOR(binaryKey, expandedInput);
	/*S-Boxs output*/
	string outputFromSBoxs = SBox(outputFromXOR);
	/*Straight Permutation*/
	string finalOutput = permutation(outputFromSBoxs, 's');
	/*Binary string to Decimal*/
	unsigned long long decimalOutput = stoull(finalOutput, 0, 2);
	/*Formatting output*/
	stringstream temp;
	temp << uppercase << setfill('0') << setw(2) << hex << decimalOutput;
	cout << temp.str() << endl;
}
